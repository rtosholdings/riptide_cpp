# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  pypi_build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
        python-version: [3.8, 3.9, '3.10']
        numpy-version: [1.21, 1.22]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
          # which we use for setting the package version (via setuptools-scm).
          fetch-depth: 0
      - name: Setup Miniconda
        env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: "pypi_build"
          python-version: ${{ matrix.python-version }}
          auto-update-conda: true
          channels: conda-forge
          channel-priority: flexible
          show-channel-urls: true
      - name: Configure Conda
        run: |
          conda config --set unsatisfiable_hints_check_depth 0 # setting unsatisfiable_hints=False is broken
      - name: Install Linux dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          conda install -q -y binutils=2.36 binutils_linux-64 gxx=8 gcc=8 "cmake>=3.18" ninja "tbb=2021.6" "tbb-devel=2021.6"
      - name: Install Windows dependencies
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          conda install -q -y "cmake>=3.18" "tbb=2021.6" "tbb-devel=2021.6"
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools-scm wheel
          python -m pip install numpy==${{ matrix.numpy-version }}.*
      - name: Build with python setup.py
        run: |
          python setup.py build --force
      - name: Package wheel
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          python setup.py bdist_wheel
      - name: Package sources
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          python setup.py sdist
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: dist/
          if-no-files-found: error
        #
        # Test with riptable (using existing env for better performance)
        #
      - name: Install built riptide_cpp
        # This depends on the riptide_cpp in dist being "newer" than on PyPI (which should be true),
        # but also allows finding all the dependencies using regular lookup.
        # The alternative would be to use "pip install --find-links --no-deps", then install all dependencies,
        # as there doesn't appear to be a "pip install --only-deps" option.
        # Could also use the "pip install -e" (editable installs) method to link to pre-build tree, but
        # that doesn't exercise the ability to install.
        run: |
          pip install riptide_cpp --upgrade --find-links ./dist
          python -c "import riptide_cpp; print(riptide_cpp.__version__); print(riptide_cpp.__file__)"
      - name: Install riptable
        # Get just the latest riptable package (first explicitly install its deps)
        run: |
          pip install pandas ansi2html numba python-dateutil
          #conda install -q -y -c rtosholdings --no-deps riptable
          pip install --no-deps riptable
          python -c "import riptable; print(riptable.__version__); print(riptable.__file__)"
      - name: Install other dependencies
        run: |
          pip install pyarrow ipython ipykernel flake8 pytest hypothesis nose bottleneck arrow
          conda list
      - name: Riptable test with pytest
        run: |
          python -m riptable.tests.run
      #- name: Riptable tooling integration tests
      #  run: |
      #    ipython -m pytest riptable/test_tooling_integration
      # disable hypothesis tests until they run faster, are more consistent, and are easier to investigate
      #- name: Riptable property based hypothesis tests
      #  run: |
      #    pytest --hypothesis-show-statistics -k test_ -m 'not xfail' riptable/hypothesis_tests

  pypi_deploy:
    # deploys build artifacts to PyPI
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    needs: [pypi_build, conda_build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: dist/
      - name: Publish artifacts to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          set -ex
          twine upload dist/* --verbose

  conda_build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
        working-directory: ./
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-2019']
        # matrix of aggregates works but is undocumented: https://stackoverflow.com/a/68940067
        zips: [
          { python: '3.8', numpy: '1.21' },
          { python: '3.8', numpy: '1.22' },
          { python: '3.9', numpy: '1.21' },
          { python: '3.9', numpy: '1.22' },
          { python: '3.10', numpy: '1.21' },
          { python: '3.10', numpy: '1.22' }
          ]
    env:
      python_version: 3.9
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Miniconda
        env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: "conda_build"
          python-version: ${{ env.python_version }}
          auto-update-conda: true
          channels: conda-forge
          channel-priority: flexible
          show-channel-urls: true
      - name: Install dependencies
        run: |
          conda config --set unsatisfiable_hints_check_depth 0 # setting unsatisfiable_hints=False is broken
          conda install -q -y conda-build setuptools_scm
      - name: Build package
        run: |
          set -ex
          export BUILD_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version(version_scheme='post-release'))")
          mkdir conda_pkgs_output
          echo "python: " ${{ matrix.zips.python }} > ./conda_variant.yaml
          echo "numpy: " ${{ matrix.zips.numpy }} >> ./conda_variant.yaml
          conda build conda_recipe --output-folder ./conda_pkgs_output --variant-config-files ./conda_variant.yaml
      - name: Publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: conda-build-artifacts
          path: conda_pkgs_output/*/riptide_cpp-*.tar.bz2
          if-no-files-found: "error"

  conda_deploy:
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    needs: [pypi_build, conda_build]
    runs-on: ubuntu-latest
    env:
      ANACONDA_USER: rtosholdings
      ANACONDA_TOKEN: ${{ secrets.anaconda_token }}
    steps:
      - name: Setup Miniconda
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: "conda_deploy"
          auto-update-conda: true
          channels: conda-forge
          channel-priority: flexible
          show-channel-urls: true
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda install anaconda-client -q -y
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: conda-build-artifacts
          path: conda_pkgs_output/
      - name: Upload to Anaconda
        shell: bash -l {0}
        run: |
          set -ex
          anaconda --token "${ANACONDA_TOKEN}" upload --label main --user ${ANACONDA_USER} ./conda_pkgs_output/*/riptide_cpp-*.tar.bz2
