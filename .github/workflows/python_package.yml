# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master, add-cmake ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7,3.8,3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy scikit-build setuptools-scm
      working-directory: ${{ env.working-directory }}
    - name: Build with python setup.py
      run: |
        python setup.py build --force
        python setup.py install
      working-directory: ${{ env.working-directory }}        

  deploy:
    # deploys binary builds for windows and mac versions of python and os
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine scikit-build
      working-directory: ${{ env.working-directory }}
    - name: Build and publish binary
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py bdist_wheel
        twine upload dist/* --verbose
      working-directory: ${{ env.working-directory }}
      
  deploy_source:
    # the linux version just does source 
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    env:
      working-directory: ./src

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine scikit-build
      working-directory: ${{ env.working-directory }}
    - name: Build and publish source
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/* --verbose      
      working-directory: ${{ env.working-directory }}

  conda_build:
    runs-on: ${{ matrix.os }}
    env:
      ANACONDA_USER: rtosholdings
      ANACONDA_TOKEN: ${{ secrets.anaconda_token }}
      working-directory: .
    strategy:
      matrix:
        # TJD removed macos-latest because conda cannot setup C++ include environment properly
        # the python package and pip package does build correctly, perhaps pull from that
        os: ['ubuntu-latest','windows-latest']
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Miniconda
        env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ""
          auto-update-conda: true
          channels: conda-forge
          channel-priority: flexible
          show-channel-urls: true
      - name: Build Package
        shell: bash -l {0}
        run: |
          set -exv
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine scikit-build
          conda create -n conda_build python=3.9 conda-build anaconda-client setuptools_scm scikit-build cmake numpy=1.21 -y
          conda activate conda_build
          export BUILD_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version(version_scheme='post-release'))")
          mkdir conda_environment
          export RIPTIDE_BUILD_VIA_CONDA="TRUE"
          conda build conda_recipe --output-folder ./conda_environment
      - name: Publish artifacts
        env:
         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' 
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: conda_environment/*/riptide_cpp-*.tar.bz2
          if-no-files-found: "error"
      - name: Upload to Anaconda
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
        shell: bash -l {0}
        run: |
          set -ex
          conda activate conda_build
          anaconda --token "${ANACONDA_TOKEN}" upload --label main --user ${ANACONDA_USER} ./conda_environment/*/riptide_cpp-*.tar.bz2
