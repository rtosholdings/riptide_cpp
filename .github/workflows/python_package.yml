# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy
      working-directory: ${{ env.working-directory }}
    - name: Build with python setup.py
      run: |
        python setup.py build --force
        python setup.py install
      working-directory: ${{ env.working-directory }}
        
  deploy:
    # deploys binary builds for windows and mac versions of python and os
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine
      working-directory: ${{ env.working-directory }}
    - name: Build and publish binary
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py bdist_wheel
        twine upload dist/* --verbose
      working-directory: ${{ env.working-directory }}
      
  deploy_source:
    # the linux version just does source 
    runs-on: ubuntu-latest
    env:
      working-directory: ./src

    steps:
    - uses: actions/checkout@v2
      with:
        # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
        # which we use for setting the package version (via setuptools-scm).
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine
      working-directory: ${{ env.working-directory }}
    - name: Build and publish source
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/* --verbose      
      working-directory: ${{ env.working-directory }}
